// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"czc_tcp/app/dao/internal"
	"czc_tcp/app/model"
	"czc_tcp/library/logger"

	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/util/gconv"
)

// userDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type userDao struct {
	internal.UserDao
}

var (
	// User is globally public accessible object for table user operations.
	User = userDao{
		internal.User,
	}
	UserTb = "user"
)

// Fill with you ideas below.

// 更具手机号获取用户数据
func GetUserByPhone(phone int64) (*model.User, error) {
	User := (*model.User)(nil)
	db := g.DB()
	sql := "select * from " + UserTb + " where phone = ?"
	record, _ := db.GetOne(sql, g.Slice{phone})
	// 转换
	if record != nil {
		if err := gconv.Struct(record, &User); err != nil {
			logger.Errorf("GetUserByPhone -> "+
				"gconv.Struct() execute failed. err = %v", err.Error())
			return nil, err
		}
	}
	return User, nil
}

//保存
func SaveFile(User *model.User) int64 {
	db := g.DB()
	id, err := db.InsertAndGetId(UserTb, User)
	if err != nil {
		logger.Error(err)
	}
	logger.Print("User ID:", id)
	return id
}

//保存数据，有--更新  无--插入
func UpdateOrInsert(User *model.User) error {
	db := g.DB()
	_, err := db.Save(UserTb, User)
	if err != nil {
		return err
	}
	return nil
}
